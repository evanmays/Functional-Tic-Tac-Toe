// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Readline = require("bs-readline/src/Readline.js");
var UserInput$FunctionalTicTacToe = require("./UserInput.bs.js");
var StateConverter$FunctionalTicTacToe = require("./StateConverter.bs.js");
var StateValidator$FunctionalTicTacToe = require("./StateValidator.bs.js");

var state = /* record */[/* contents : record */[
    /* clock */0,
    /* currentTurn : X */0,
    /* topLeft */undefined,
    /* topMiddle */undefined,
    /* topRight */undefined,
    /* middleLeft */undefined,
    /* middleMiddle */undefined,
    /* middleRight */undefined,
    /* bottomLeft */undefined,
    /* bottomMiddle */undefined,
    /* bottomRight */undefined
  ]];

function runOnce(inputString) {
  if (UserInput$FunctionalTicTacToe.isValidInputString(inputString)) {
    var input = UserInput$FunctionalTicTacToe.gatherInput(inputString);
    var validInput = StateValidator$FunctionalTicTacToe.isValidInput(input, state[0]);
    if (validInput) {
      state[0] = StateConverter$FunctionalTicTacToe.getNextGameState(input, state[0]);
      console.log(StateConverter$FunctionalTicTacToe.stateAsString(state[0]));
      var winner = StateValidator$FunctionalTicTacToe.theWinnerIs(state[0]);
      if (winner !== undefined) {
        console.log("Game over, " + (StateConverter$FunctionalTicTacToe.playerToString(winner) + " Wins!"));
        return Readline.close(/* () */0);
      } else {
        console.log("Please go player " + StateConverter$FunctionalTicTacToe.playerToString(state[0][/* currentTurn */1]));
        return /* () */0;
      }
    } else {
      console.log("That move is invalid :(");
      return /* () */0;
    }
  } else {
    console.log("That move is not on the grid");
    return /* () */0;
  }
}

console.log("Welcome to Functional Tic Tac Toe");

console.log("When it is your turn, please enter the position you would like to mark.");

console.log("Please go player " + StateConverter$FunctionalTicTacToe.playerToString(state[0][/* currentTurn */1]));

Readline.readline(runOnce);

var playerToString = StateConverter$FunctionalTicTacToe.playerToString;

var optionalPlayerToString = StateConverter$FunctionalTicTacToe.optionalPlayerToString;

var addGridToRow = StateConverter$FunctionalTicTacToe.addGridToRow;

var stateAsString = StateConverter$FunctionalTicTacToe.stateAsString;

var overwriteBox = StateConverter$FunctionalTicTacToe.overwriteBox;

var nextTurn = StateConverter$FunctionalTicTacToe.nextTurn;

var getNextGameState = StateConverter$FunctionalTicTacToe.getNextGameState;

var isValidInput = StateValidator$FunctionalTicTacToe.isValidInput;

var allAreOnePlayer = StateValidator$FunctionalTicTacToe.allAreOnePlayer;

var theWinnerIs = StateValidator$FunctionalTicTacToe.theWinnerIs;

var isValidInputString = UserInput$FunctionalTicTacToe.isValidInputString;

var gatherInput = UserInput$FunctionalTicTacToe.gatherInput;

var startingPlayer = /* X */0;

exports.playerToString = playerToString;
exports.optionalPlayerToString = optionalPlayerToString;
exports.addGridToRow = addGridToRow;
exports.stateAsString = stateAsString;
exports.overwriteBox = overwriteBox;
exports.nextTurn = nextTurn;
exports.getNextGameState = getNextGameState;
exports.isValidInput = isValidInput;
exports.allAreOnePlayer = allAreOnePlayer;
exports.theWinnerIs = theWinnerIs;
exports.isValidInputString = isValidInputString;
exports.gatherInput = gatherInput;
exports.startingPlayer = startingPlayer;
exports.state = state;
exports.runOnce = runOnce;
/*  Not a pure module */
