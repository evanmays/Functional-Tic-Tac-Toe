// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

function isValidInput(input, state) {
  var pieceAtPosition;
  switch (input) {
    case /* TopLeft */0 :
        pieceAtPosition = state[/* topLeft */2];
        break;
    case /* TopMiddle */1 :
        pieceAtPosition = state[/* topMiddle */3];
        break;
    case /* TopRight */2 :
        pieceAtPosition = state[/* topRight */4];
        break;
    case /* MiddleLeft */3 :
        pieceAtPosition = state[/* middleLeft */5];
        break;
    case /* MiddleMiddle */4 :
        pieceAtPosition = state[/* middleMiddle */6];
        break;
    case /* MiddleRight */5 :
        pieceAtPosition = state[/* middleRight */7];
        break;
    case /* BottomLeft */6 :
        pieceAtPosition = state[/* bottomLeft */8];
        break;
    case /* BottomMiddle */7 :
        pieceAtPosition = state[/* bottomMiddle */9];
        break;
    case /* BottomRight */8 :
        pieceAtPosition = state[/* bottomRight */10];
        break;
    
  }
  return pieceAtPosition === undefined;
}

function allAreOnePlayer(positions) {
  if (List.for_all((function (value) {
            return Caml_obj.caml_equal(value, /* X */0);
          }), positions)) {
    return true;
  } else {
    return List.for_all((function (value) {
                  return Caml_obj.caml_equal(value, /* O */1);
                }), positions);
  }
}

function theWinnerIs(state) {
  var firstRow_000 = state[/* topLeft */2];
  var firstRow_001 = /* :: */[
    state[/* topMiddle */3],
    /* :: */[
      state[/* topRight */4],
      /* [] */0
    ]
  ];
  var firstRow = /* :: */[
    firstRow_000,
    firstRow_001
  ];
  var secondRow_000 = state[/* middleLeft */5];
  var secondRow_001 = /* :: */[
    state[/* middleMiddle */6],
    /* :: */[
      state[/* middleRight */7],
      /* [] */0
    ]
  ];
  var secondRow = /* :: */[
    secondRow_000,
    secondRow_001
  ];
  var thirdRow_000 = state[/* bottomLeft */8];
  var thirdRow_001 = /* :: */[
    state[/* bottomMiddle */9],
    /* :: */[
      state[/* bottomRight */10],
      /* [] */0
    ]
  ];
  var thirdRow = /* :: */[
    thirdRow_000,
    thirdRow_001
  ];
  var firstColumn_000 = state[/* topLeft */2];
  var firstColumn_001 = /* :: */[
    state[/* middleLeft */5],
    /* :: */[
      state[/* bottomLeft */8],
      /* [] */0
    ]
  ];
  var firstColumn = /* :: */[
    firstColumn_000,
    firstColumn_001
  ];
  var secondColumn_000 = state[/* topMiddle */3];
  var secondColumn_001 = /* :: */[
    state[/* middleMiddle */6],
    /* :: */[
      state[/* bottomMiddle */9],
      /* [] */0
    ]
  ];
  var secondColumn = /* :: */[
    secondColumn_000,
    secondColumn_001
  ];
  var thirdColumn_000 = state[/* topRight */4];
  var thirdColumn_001 = /* :: */[
    state[/* middleRight */7],
    /* :: */[
      state[/* bottomRight */10],
      /* [] */0
    ]
  ];
  var thirdColumn = /* :: */[
    thirdColumn_000,
    thirdColumn_001
  ];
  var leftDiagonal_000 = state[/* topLeft */2];
  var leftDiagonal_001 = /* :: */[
    state[/* middleMiddle */6],
    /* :: */[
      state[/* middleRight */7],
      /* [] */0
    ]
  ];
  var leftDiagonal = /* :: */[
    leftDiagonal_000,
    leftDiagonal_001
  ];
  var rightDiagonal_000 = state[/* topRight */4];
  var rightDiagonal_001 = /* :: */[
    state[/* middleMiddle */6],
    /* :: */[
      state[/* bottomLeft */8],
      /* [] */0
    ]
  ];
  var rightDiagonal = /* :: */[
    rightDiagonal_000,
    rightDiagonal_001
  ];
  var possibleCombinationsOfThree_001 = /* :: */[
    secondRow,
    /* :: */[
      thirdRow,
      /* :: */[
        firstColumn,
        /* :: */[
          secondColumn,
          /* :: */[
            thirdColumn,
            /* :: */[
              leftDiagonal,
              /* :: */[
                rightDiagonal,
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]
  ];
  var possibleCombinationsOfThree = /* :: */[
    firstRow,
    possibleCombinationsOfThree_001
  ];
  var winnerExists = List.exists(allAreOnePlayer, possibleCombinationsOfThree);
  if (winnerExists) {
    return List.hd(List.find(allAreOnePlayer, possibleCombinationsOfThree));
  }
  
}

exports.isValidInput = isValidInput;
exports.allAreOnePlayer = allAreOnePlayer;
exports.theWinnerIs = theWinnerIs;
/* No side effect */
